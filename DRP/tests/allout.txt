CompoundFromCsv.py:1 at module level:
        D400: First line should end with a period (not 'e')

     1: #!/usr/bin/env python
     2: 
     3: '''Tests for ingesting CSVs into the  compound guide'''
     4: 
     5: # This file contains a (very) loose framework from which others can base their test files and be
     6: # conformant with the local arrangement of test cases.
     7: # For more information about the structure of tests, consult the python documentation at
        ...


CompoundFromCsv.py:1 at module level:
        D300: Use """triple double quotes""" (found '''-quotes)

     1: #!/usr/bin/env python
     2: 
     3: '''Tests for ingesting CSVs into the  compound guide'''
     4: 
     5: # This file contains a (very) loose framework from which others can base their test files and be
     6: # conformant with the local arrangement of test cases.
     7: # For more information about the structure of tests, consult the python documentation at
        ...


CompoundFromCsv.py:26 in public class `Good`:
        D203: 1 blank line required before class docstring (found 0)

    26: class Good(DRPTestCase):
    27:     '''Tests the spreadsheets that should work (whose names end with the ssids)'''
    28: 
    29:     ssids = (1, 3, 5, 9, 11, 13)
    30:     filenameStub = 'compound_spread_test{0}.csv'
    31:     prefix = os.path.join(settings.APP_DIR, os.path.join('tests', 'resource'))
    32: 
        ...


CompoundFromCsv.py:26 in public class `Good`:
        D400: First line should end with a period (not ')')

    26: class Good(DRPTestCase):
    27:     '''Tests the spreadsheets that should work (whose names end with the ssids)'''
    28: 
    29:     ssids = (1, 3, 5, 9, 11, 13)
    30:     filenameStub = 'compound_spread_test{0}.csv'
    31:     prefix = os.path.join(settings.APP_DIR, os.path.join('tests', 'resource'))
    32: 
        ...


CompoundFromCsv.py:26 in public class `Good`:
        D300: Use """triple double quotes""" (found '''-quotes)

    26: class Good(DRPTestCase):
    27:     '''Tests the spreadsheets that should work (whose names end with the ssids)'''
    28: 
    29:     ssids = (1, 3, 5, 9, 11, 13)
    30:     filenameStub = 'compound_spread_test{0}.csv'
    31:     prefix = os.path.join(settings.APP_DIR, os.path.join('tests', 'resource'))
    32: 
        ...


CompoundFromCsv.py:50 in public class `Broken`:
        D203: 1 blank line required before class docstring (found 0)

    50: class Broken(Good):
    51:     '''Tests the broken spreads whose names ends with the values in ssids'''
    52: 
    53:     ssids = (2, 4, 6, 7, 8, 10, 12, 14, 15)
    54: 
    55:     def runTest(self):
    56:         for fileName in self.fileNames:
        ...


CompoundFromCsv.py:50 in public class `Broken`:
        D400: First line should end with a period (not 's')

    50: class Broken(Good):
    51:     '''Tests the broken spreads whose names ends with the values in ssids'''
    52: 
    53:     ssids = (2, 4, 6, 7, 8, 10, 12, 14, 15)
    54: 
    55:     def runTest(self):
    56:         for fileName in self.fileNames:
        ...


CompoundFromCsv.py:50 in public class `Broken`:
        D300: Use """triple double quotes""" (found '''-quotes)

    50: class Broken(Good):
    51:     '''Tests the broken spreads whose names ends with the values in ssids'''
    52: 
    53:     ssids = (2, 4, 6, 7, 8, 10, 12, 14, 15)
    54: 
    55:     def runTest(self):
    56:         for fileName in self.fileNames:
        ...


CompoundToArff.py:25 in public class `CompoundToArff`:
        D203: 1 blank line required before class docstring (found 0)

    25: class CompoundToArff(DRPTestCase):
    26:     '''Validates the structure of the Arff- this could be more detailed if we find that we encounter issues later'''
    27: 
    28:     def checkArff(self, fn):
    29:         process = subprocess.Popen(['java', '-cp', settings.WEKA_PATH['3.6'], 'weka.core.Instances', fn], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    30:         process.wait()
    31:         c = process.returncode
        ...


CompoundToArff.py:25 in public class `CompoundToArff`:
        D400: First line should end with a period (not 'r')

    25: class CompoundToArff(DRPTestCase):
    26:     '''Validates the structure of the Arff- this could be more detailed if we find that we encounter issues later'''
    27: 
    28:     def checkArff(self, fn):
    29:         process = subprocess.Popen(['java', '-cp', settings.WEKA_PATH['3.6'], 'weka.core.Instances', fn], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    30:         process.wait()
    31:         c = process.returncode
        ...


CompoundToArff.py:25 in public class `CompoundToArff`:
        D300: Use """triple double quotes""" (found '''-quotes)

    25: class CompoundToArff(DRPTestCase):
    26:     '''Validates the structure of the Arff- this could be more detailed if we find that we encounter issues later'''
    27: 
    28:     def checkArff(self, fn):
    29:         process = subprocess.Popen(['java', '-cp', settings.WEKA_PATH['3.6'], 'weka.core.Instances', fn], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    30:         process.wait()
    31:         c = process.returncode
        ...


CompoundToCsv.py:1 at module level:
        D400: First line should end with a period (not 's')

     1: #!/usr/bin/env python
     2: '''A test suite for checking that queryset to csv output works'''
     3: 
     4: import unittest
     5: from decorators import createsUser, joinsLabGroup, createsChemicalClass, createsCompound
     6: from DRP.models import Compound
     7: import csv
        ...


CompoundToCsv.py:1 at module level:
        D300: Use """triple double quotes""" (found '''-quotes)

     1: #!/usr/bin/env python
     2: '''A test suite for checking that queryset to csv output works'''
     3: 
     4: import unittest
     5: from decorators import createsUser, joinsLabGroup, createsChemicalClass, createsCompound
     6: from DRP.models import Compound
     7: import csv
        ...


DataImport.py:1 at module level:
        D300: Use """triple double quotes""" (found '-quotes)

     1: #!/usr/bin/env python
     2: "A test for making sure that data imports from a remote server."
     3: 
     4: import unittest
     5: from DRPTestCase import DRPTestCase, runTests
     6: from django.db import transaction
     7: from decorators import createsPerformedReaction, createsCompound, joinsLabGroup, createsChemicalClass
        ...


DataImport.py:20 in public class `ApiV1`:
        D203: 1 blank line required before class docstring (found 0)

    20: class ApiV1(DRPTestCase):
    21:     """Tests the version 1 api"""
    22: 
    23:     @transaction.atomic
    24:     def databaseOperation(self, limit=None):
    25:         """Do the actual database import- this is done inside a transaction so that the database does not interfere with itself."""
    26:         c = import_data.Command(limit=None)
        ...


DataImport.py:20 in public class `ApiV1`:
        D400: First line should end with a period (not 'i')

    20: class ApiV1(DRPTestCase):
    21:     """Tests the version 1 api"""
    22: 
    23:     @transaction.atomic
    24:     def databaseOperation(self, limit=None):
    25:         """Do the actual database import- this is done inside a transaction so that the database does not interfere with itself."""
    26:         c = import_data.Command(limit=None)
        ...


DataImport.py:29 in public method `test_all`:
        D209: Multi-line docstring closing quotes should be on a separate line

    29:     def test_all(self):
    30:         """Test the database import. For the moment the only test done is to make sure that no exceptions are thrown, since
    31:         any bugs we can identify so far are caught by the database integrity protection from django, which is well tested"""
    32:         self.databaseOperation()


DataImport.py:29 in public method `test_all`:
        D400: First line should end with a period (not 'e')

    29:     def test_all(self):
    30:         """Test the database import. For the moment the only test done is to make sure that no exceptions are thrown, since
    31:         any bugs we can identify so far are caught by the database integrity protection from django, which is well tested"""
    32:         self.databaseOperation()


DataImport.py:34 in public method `test_limit`:
        D400: First line should end with a period (not 't')

    34:     def test_limit(self):
    35:         """test the limited import"""
    36:         self.databaseOperation(5)
    37:         self.assertEqual(PerformedReaction.objects.all().count(), 5)


decorators.py:1 at module level:
        D400: First line should end with a period (not 'P')

     1: '''A module containing decorators which are useful in most test cases for the DRP'''
     2: 
     3: from DRP.models import Compound, LabGroup, ChemicalClass, License, LicenseAgreement, PerformedReaction, CompoundQuantity, CompoundRole
     4: from DRP.models.rxnDescriptorValues import BoolRxnDescriptorValue, OrdRxnDescriptorValue, NumRxnDescriptorValue, CatRxnDescriptorValue
     5: from DRP.models.rxnDescriptors import BoolRxnDescriptor, OrdRxnDescriptor, CatRxnDescriptor, NumRxnDescriptor
     6: from DRP.models import DataSet
     7: from django.contrib.auth.models import User
        ...


decorators.py:1 at module level:
        D300: Use """triple double quotes""" (found '''-quotes)

     1: '''A module containing decorators which are useful in most test cases for the DRP'''
     2: 
     3: from DRP.models import Compound, LabGroup, ChemicalClass, License, LicenseAgreement, PerformedReaction, CompoundQuantity, CompoundRole
     4: from DRP.models.rxnDescriptorValues import BoolRxnDescriptorValue, OrdRxnDescriptorValue, NumRxnDescriptorValue, CatRxnDescriptorValue
     5: from DRP.models.rxnDescriptors import BoolRxnDescriptor, OrdRxnDescriptor, CatRxnDescriptor, NumRxnDescriptor
     6: from DRP.models import DataSet
     7: from django.contrib.auth.models import User
        ...


decorators.py:13 in public function `createsOrdRxnDescriptor`:
        D202: No blank lines allowed after function docstring (found 1)

    13: def createsOrdRxnDescriptor(heading, minimum, maximum, calculatorSoftware='manual', calculatorSoftwareVersion='0'):
    14:     '''A class decorator that creates an ordinal reaction descriptor.'''
    15: 
    16:     def _createsOrdRxnDescriptor(c):
    17:         _oldSetup = c.setUp
    18:         _oldTearDown = c.tearDown
    19: 
        ...


decorators.py:13 in public function `createsOrdRxnDescriptor`:
        D300: Use """triple double quotes""" (found '''-quotes)

    13: def createsOrdRxnDescriptor(heading, minimum, maximum, calculatorSoftware='manual', calculatorSoftwareVersion='0'):
    14:     '''A class decorator that creates an ordinal reaction descriptor.'''
    15: 
    16:     def _createsOrdRxnDescriptor(c):
    17:         _oldSetup = c.setUp
    18:         _oldTearDown = c.tearDown
    19: 
        ...


decorators.py:114 in public function `createsPerformedReaction`:
        D202: No blank lines allowed after function docstring (found 1)

   114: def createsPerformedReaction(labTitle, username, reference, valid=True):
   115:     '''A class decorator that creates a very minimal reaction with no compounds or reactants'''
   116: 
   117:     def _createsPerformedReaction(c):
   118:         _oldSetup = c.setUp
   119:         _oldTearDown = c.tearDown
   120: 
        ...


decorators.py:114 in public function `createsPerformedReaction`:
        D400: First line should end with a period (not 's')

   114: def createsPerformedReaction(labTitle, username, reference, valid=True):
   115:     '''A class decorator that creates a very minimal reaction with no compounds or reactants'''
   116: 
   117:     def _createsPerformedReaction(c):
   118:         _oldSetup = c.setUp
   119:         _oldTearDown = c.tearDown
   120: 
        ...


decorators.py:114 in public function `createsPerformedReaction`:
        D300: Use """triple double quotes""" (found '''-quotes)

   114: def createsPerformedReaction(labTitle, username, reference, valid=True):
   115:     '''A class decorator that creates a very minimal reaction with no compounds or reactants'''
   116: 
   117:     def _createsPerformedReaction(c):
   118:         _oldSetup = c.setUp
   119:         _oldTearDown = c.tearDown
   120: 
        ...


decorators.py:238 in public function `createsUser`:
        D202: No blank lines allowed after function docstring (found 1)

   238: def createsUser(username, password, is_superuser=False):
   239:     '''A class decorator that creates a user'''
   240: 
   241:     def _createsUser(c):
   242: 
   243:         _oldSetup = c.setUp
   244:         _oldTearDown = c.tearDown
        ...


decorators.py:238 in public function `createsUser`:
        D400: First line should end with a period (not 'r')

   238: def createsUser(username, password, is_superuser=False):
   239:     '''A class decorator that creates a user'''
   240: 
   241:     def _createsUser(c):
   242: 
   243:         _oldSetup = c.setUp
   244:         _oldTearDown = c.tearDown
        ...


decorators.py:238 in public function `createsUser`:
        D300: Use """triple double quotes""" (found '''-quotes)

   238: def createsUser(username, password, is_superuser=False):
   239:     '''A class decorator that creates a user'''
   240: 
   241:     def _createsUser(c):
   242: 
   243:         _oldSetup = c.setUp
   244:         _oldTearDown = c.tearDown
        ...


decorators.py:313 in public function `createsChemicalClass`:
        D202: No blank lines allowed after function docstring (found 1)

   313: def createsChemicalClass(label, description):
   314:     '''A class decorator that creates a test chemical class for the addition of compounds into the database'''
   315: 
   316:     def _createsChemicalClass(c):
   317: 
   318:         _oldSetup = c.setUp
   319:         _oldTearDown = c.tearDown
        ...


decorators.py:313 in public function `createsChemicalClass`:
        D400: First line should end with a period (not 'e')

   313: def createsChemicalClass(label, description):
   314:     '''A class decorator that creates a test chemical class for the addition of compounds into the database'''
   315: 
   316:     def _createsChemicalClass(c):
   317: 
   318:         _oldSetup = c.setUp
   319:         _oldTearDown = c.tearDown
        ...


decorators.py:313 in public function `createsChemicalClass`:
        D300: Use """triple double quotes""" (found '''-quotes)

   313: def createsChemicalClass(label, description):
   314:     '''A class decorator that creates a test chemical class for the addition of compounds into the database'''
   315: 
   316:     def _createsChemicalClass(c):
   317: 
   318:         _oldSetup = c.setUp
   319:         _oldTearDown = c.tearDown
        ...


decorators.py:337 in public function `joinsLabGroup`:
        D209: Multi-line docstring closing quotes should be on a separate line

   337: def joinsLabGroup(username, labGroupTitle):
   338:     '''A class decorator that creates a test lab group with labGroupTitle as it's title and assigns user identified by
   339:     username to that lab group'''
   340:     def _joinsLabGroup(c):
   341:         _oldSetup = c.setUp
   342:         _oldTearDown = c.tearDown
   343: 
        ...


decorators.py:337 in public function `joinsLabGroup`:
        D400: First line should end with a period (not 'y')

   337: def joinsLabGroup(username, labGroupTitle):
   338:     '''A class decorator that creates a test lab group with labGroupTitle as it's title and assigns user identified by
   339:     username to that lab group'''
   340:     def _joinsLabGroup(c):
   341:         _oldSetup = c.setUp
   342:         _oldTearDown = c.tearDown
   343: 
        ...


decorators.py:337 in public function `joinsLabGroup`:
        D300: Use """triple double quotes""" (found '''-quotes)

   337: def joinsLabGroup(username, labGroupTitle):
   338:     '''A class decorator that creates a test lab group with labGroupTitle as it's title and assigns user identified by
   339:     username to that lab group'''
   340:     def _joinsLabGroup(c):
   341:         _oldSetup = c.setUp
   342:         _oldTearDown = c.tearDown
   343: 
        ...


decorators.py:362 in public function `signsExampleLicense`:
        D400: First line should end with a period (not 'p')

   362: def signsExampleLicense(username):
   363:     '''A class decorator that creates a test license and makes the user specified by username sign it on setUp'''
   364:     def _signsExampleLicense(c):
   365: 
   366:         _oldSetup = c.setUp
   367:         _oldTearDown = c.tearDown
   368: 
        ...


decorators.py:362 in public function `signsExampleLicense`:
        D300: Use """triple double quotes""" (found '''-quotes)

   362: def signsExampleLicense(username):
   363:     '''A class decorator that creates a test license and makes the user specified by username sign it on setUp'''
   364:     def _signsExampleLicense(c):
   365: 
   366:         _oldSetup = c.setUp
   367:         _oldTearDown = c.tearDown
   368: 
        ...


decorators.py:390 in public function `loadsCompoundsFromCsv`:
        D202: No blank lines allowed after function docstring (found 1)

   390: def loadsCompoundsFromCsv(labGroupTitle, csvFileName):
   391:     '''A class decorator that creates a test set of compounds using the csvFileName, which should be stored in the tests directory resource folder.'''
   392: 
   393:     def _loadsCompoundsFromCsv(c):
   394: 
   395:         _oldSetup = c.setUp
   396:         _oldTearDown = c.tearDown
        ...


decorators.py:390 in public function `loadsCompoundsFromCsv`:
        D300: Use """triple double quotes""" (found '''-quotes)

   390: def loadsCompoundsFromCsv(labGroupTitle, csvFileName):
   391:     '''A class decorator that creates a test set of compounds using the csvFileName, which should be stored in the tests directory resource folder.'''
   392: 
   393:     def _loadsCompoundsFromCsv(c):
   394: 
   395:         _oldSetup = c.setUp
   396:         _oldTearDown = c.tearDown
        ...


DRPTestCase.py:1 at module level:
        D400: First line should end with a period (not 's')

     1: '''A module containing only the DRPTestCase class'''
     2: import unittest
     3: from django.conf import settings
     4: import importlib
     5: import DRP
     6: from django.contrib.auth.models import User
     7: molDescriptorPlugins = [importlib.import_module(plugin) for plugin in settings.MOL_DESCRIPTOR_PLUGINS]  # this prevents a cyclic dependency problem
        ...


DRPTestCase.py:1 at module level:
        D300: Use """triple double quotes""" (found '''-quotes)

     1: '''A module containing only the DRPTestCase class'''
     2: import unittest
     3: from django.conf import settings
     4: import importlib
     5: import DRP
     6: from django.contrib.auth.models import User
     7: molDescriptorPlugins = [importlib.import_module(plugin) for plugin in settings.MOL_DESCRIPTOR_PLUGINS]  # this prevents a cyclic dependency problem
        ...


DRPTestCase.py:11 in public class `DRPTestCase`:
        D203: 1 blank line required before class docstring (found 0)

    11: class DRPTestCase(unittest.TestCase):
    12:     '''A quick and dirty safety valve to stop people accidentally running database tests in production environments
    13:     For more information see the documentation.
    14:     '''
    15: 
    16:     def __init__(self, *args, **kwargs):
    17:         if not settings.TESTING:
        ...


DRPTestCase.py:11 in public class `DRPTestCase`:
        D400: First line should end with a period (not 's')

    11: class DRPTestCase(unittest.TestCase):
    12:     '''A quick and dirty safety valve to stop people accidentally running database tests in production environments
    13:     For more information see the documentation.
    14:     '''
    15: 
    16:     def __init__(self, *args, **kwargs):
    17:         if not settings.TESTING:
        ...


DRPTestCase.py:11 in public class `DRPTestCase`:
        D300: Use """triple double quotes""" (found '''-quotes)

    11: class DRPTestCase(unittest.TestCase):
    12:     '''A quick and dirty safety valve to stop people accidentally running database tests in production environments
    13:     For more information see the documentation.
    14:     '''
    15: 
    16:     def __init__(self, *args, **kwargs):
    17:         if not settings.TESTING:
        ...


DRPTestCase.py:49 in public function `runTests`:
        D400: First line should end with a period (not 'e')

    49: def runTests(suite, failfast=False):
    50:     '''A function which empties out the database prior to and after running the tests contained in suite'''
    51:     cleanUpDatabase()
    52:     return unittest.TextTestRunner(verbosity=4, failfast=failfast).run(suite)


DRPTestCase.py:49 in public function `runTests`:
        D300: Use """triple double quotes""" (found '''-quotes)

    49: def runTests(suite, failfast=False):
    50:     '''A function which empties out the database prior to and after running the tests contained in suite'''
    51:     cleanUpDatabase()
    52:     return unittest.TextTestRunner(verbosity=4, failfast=failfast).run(suite)


Email.py:1 at module level:
        D400: First line should end with a period (not 'l')

     1: #!/usr/bin/env python
     2: '''Tests for the Email classes contained in DRP.Email'''
     3: 
     4: from django.conf import settings
     5: import unittest
     6: from uuid import uuid4
     7: import imaplib
        ...


Email.py:1 at module level:
        D300: Use """triple double quotes""" (found '''-quotes)

     1: #!/usr/bin/env python
     2: '''Tests for the Email classes contained in DRP.Email'''
     3: 
     4: from django.conf import settings
     5: import unittest
     6: from uuid import uuid4
     7: import imaplib
        ...


Email.py:16 in public class `EmailSendsAndRecieves`:
        D203: 1 blank line required before class docstring (found 0)

    16: class EmailSendsAndRecieves(DRPTestCase):
    17:     '''Sends and recieves a test email, and checks that the contents are correct'''
    18: 
    19:     def setUp(self):
    20:         '''Create an email with a unique header'''
    21:         self.headerId = uuid4()
    22:         self.email = DRP.Email.Email('Test Subject Header: {0}'.format(self.headerId), 'This message is a test. Please disregard but do not delete this email.', [settings.EMAIL_HOST_USER])
        ...


Email.py:16 in public class `EmailSendsAndRecieves`:
        D400: First line should end with a period (not 't')

    16: class EmailSendsAndRecieves(DRPTestCase):
    17:     '''Sends and recieves a test email, and checks that the contents are correct'''
    18: 
    19:     def setUp(self):
    20:         '''Create an email with a unique header'''
    21:         self.headerId = uuid4()
    22:         self.email = DRP.Email.Email('Test Subject Header: {0}'.format(self.headerId), 'This message is a test. Please disregard but do not delete this email.', [settings.EMAIL_HOST_USER])
        ...


Email.py:16 in public class `EmailSendsAndRecieves`:
        D300: Use """triple double quotes""" (found '''-quotes)

    16: class EmailSendsAndRecieves(DRPTestCase):
    17:     '''Sends and recieves a test email, and checks that the contents are correct'''
    18: 
    19:     def setUp(self):
    20:         '''Create an email with a unique header'''
    21:         self.headerId = uuid4()
    22:         self.email = DRP.Email.Email('Test Subject Header: {0}'.format(self.headerId), 'This message is a test. Please disregard but do not delete this email.', [settings.EMAIL_HOST_USER])
        ...


Email.py:19 in public method `setUp`:
        D400: First line should end with a period (not 'r')

    19:     def setUp(self):
    20:         '''Create an email with a unique header'''
    21:         self.headerId = uuid4()
    22:         self.email = DRP.Email.Email('Test Subject Header: {0}'.format(self.headerId), 'This message is a test. Please disregard but do not delete this email.', [settings.EMAIL_HOST_USER])


Email.py:19 in public method `setUp`:
        D300: Use """triple double quotes""" (found '''-quotes)

    19:     def setUp(self):
    20:         '''Create an email with a unique header'''
    21:         self.headerId = uuid4()
    22:         self.email = DRP.Email.Email('Test Subject Header: {0}'.format(self.headerId), 'This message is a test. Please disregard but do not delete this email.', [settings.EMAIL_HOST_USER])


Email.py:24 in public method `runTest`:
        D401: First line should be in imperative mood ('Send', not 'Sends')

    24:     def runTest(self):
    25:         '''Sends an email using SMTP and fetches it via IMAP'''
    26:         errMessage = 'False is not True'
    27:         messages = ''
    28:         testPass = False
    29:         self.email.send()
    30:         time.sleep(10)
        ...


Email.py:24 in public method `runTest`:
        D400: First line should end with a period (not 'P')

    24:     def runTest(self):
    25:         '''Sends an email using SMTP and fetches it via IMAP'''
    26:         errMessage = 'False is not True'
    27:         messages = ''
    28:         testPass = False
    29:         self.email.send()
    30:         time.sleep(10)
        ...


Email.py:24 in public method `runTest`:
        D300: Use """triple double quotes""" (found '''-quotes)

    24:     def runTest(self):
    25:         '''Sends an email using SMTP and fetches it via IMAP'''
    26:         errMessage = 'False is not True'
    27:         messages = ''
    28:         testPass = False
    29:         self.email.send()
    30:         time.sleep(10)
        ...


modelBuildingTests.py:1 at module level:
        D400: First line should end with a period (not 's')

     1: #!/usr/bin/env python
     2: '''A module containing tests for the ModelFactory class'''
     3: 
     4: import unittest
     5: from DRP.models import PerformedReaction, ModelContainer, Descriptor
     6: from decorators import createsPerformedReactionSetOrd, createsPerformedReactionSetBool
     7: from DRPTestCase import DRPTestCase, runTests
        ...


modelBuildingTests.py:1 at module level:
        D300: Use """triple double quotes""" (found '''-quotes)

     1: #!/usr/bin/env python
     2: '''A module containing tests for the ModelFactory class'''
     3: 
     4: import unittest
     5: from DRP.models import PerformedReaction, ModelContainer, Descriptor
     6: from decorators import createsPerformedReactionSetOrd, createsPerformedReactionSetBool
     7: from DRPTestCase import DRPTestCase, runTests
        ...


