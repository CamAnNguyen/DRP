drp.py:1 at module level:
        D400: First line should end with a period (not 'e')

     1: """Basic reaction descriptors calculation module"""
     2: import DRP
     3: from itertools import chain
     4: from numpy import mean, average as wmean
     5: from scipy.stats import gmean
     6: from django.db.models import Sum
     7: from utils import setup
        ...


drp.py:310 in private function `_calculate`:
        D401: First line should be in imperative mood ('Calculate', not 'Calculates')

   310: def _calculate(reaction, descriptorDict, verbose=False, whitelist=None, num_vals_to_create=[], bool_vals_to_create=[]):
   311:     """
   312:     Calculates with the descriptorDict already created and previous descriptor values deleted.
   313:     """
   314: 
   315:     # descriptor Value classes
   316:     CompoundQuantity = DRP.models.CompoundQuantity
        ...


drp.py:310 in private function `_calculate`:
        D202: No blank lines allowed after function docstring (found 1)

   310: def _calculate(reaction, descriptorDict, verbose=False, whitelist=None, num_vals_to_create=[], bool_vals_to_create=[]):
   311:     """
   312:     Calculates with the descriptorDict already created and previous descriptor values deleted.
   313:     """
   314: 
   315:     # descriptor Value classes
   316:     CompoundQuantity = DRP.models.CompoundQuantity
        ...


drp.py:310 in private function `_calculate`:
        D200: One-line docstring should fit on one line with quotes (found 3)

   310: def _calculate(reaction, descriptorDict, verbose=False, whitelist=None, num_vals_to_create=[], bool_vals_to_create=[]):
   311:     """
   312:     Calculates with the descriptorDict already created and previous descriptor values deleted.
   313:     """
   314: 
   315:     # descriptor Value classes
   316:     CompoundQuantity = DRP.models.CompoundQuantity
        ...


utils.py:1 at module level:
        D400: First line should end with a period (not 's')

     1: '''A utilities module for helping with reaction descriptor plugins'''
     2: import DRP
     3: from django.db import transaction
     4: 
     5: 
     6: class LazyDescDict(object):
     7: 
        ...


utils.py:1 at module level:
        D300: Use """triple double quotes""" (found '''-quotes)

     1: '''A utilities module for helping with reaction descriptor plugins'''
     2: import DRP
     3: from django.db import transaction
     4: 
     5: 
     6: class LazyDescDict(object):
     7: 
        ...


utils.py:66 in public method `__getattr__`:
        D401: First line should be in imperative mood ('Deal', not 'Deals')

    66:     def __getattr__(self, name):
    67:         """
    68:         Deals with all names that are not defined explicitly by passing them to the internal dictionary (after initialising it)."
    69:         """
    70:         def _pass_attr(*args, **kwargs):
    71:             self.initialise(self.descDict)
    72:             return getattr(self.internalDict, name)(*args, **kwargs)
        ...


utils.py:66 in public method `__getattr__`:
        D400: First line should end with a period (not '"')

    66:     def __getattr__(self, name):
    67:         """
    68:         Deals with all names that are not defined explicitly by passing them to the internal dictionary (after initialising it)."
    69:         """
    70:         def _pass_attr(*args, **kwargs):
    71:             self.initialise(self.descDict)
    72:             return getattr(self.internalDict, name)(*args, **kwargs)
        ...


utils.py:66 in public method `__getattr__`:
        D200: One-line docstring should fit on one line with quotes (found 3)

    66:     def __getattr__(self, name):
    67:         """
    68:         Deals with all names that are not defined explicitly by passing them to the internal dictionary (after initialising it)."
    69:         """
    70:         def _pass_attr(*args, **kwargs):
    71:             self.initialise(self.descDict)
    72:             return getattr(self.internalDict, name)(*args, **kwargs)
        ...


